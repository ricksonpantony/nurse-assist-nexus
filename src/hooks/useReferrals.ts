import { useState, useEffect } from "react";
import { supabase } from "@/integrations/supabase/client";
import { useToast } from "@/hooks/use-toast";
import { useRecycleBin } from "@/hooks/useRecycleBin";

export interface Referral {
  id: string;
  referral_id: string;
  full_name: string;
  email: string;
  phone: string;
  address: string | null;
  bank_name: string | null;
  bsb: string | null;
  account_number: string | null;
  notes: string | null;
  created_at?: string;
  updated_at?: string;
}

export interface ReferralPayment {
  id: string;
  referral_id: string;
  student_id: string;
  amount: number;
  payment_date: string;
  payment_method: string;
  notes: string | null;
  created_at?: string;
}

// Type for inserting new referrals (without auto-generated fields)
type ReferralInsert = Omit<Referral, 'id' | 'referral_id' | 'created_at' | 'updated_at'>;

export const useReferrals = () => {
  const [referrals, setReferrals] = useState<Referral[]>([]);
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();
  const { moveToRecycleBin } = useRecycleBin();

  const fetchReferrals = async () => {
    try {
      setLoading(true);
      
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        console.log('User not authenticated');
        setReferrals([]);
        return;
      }

      const { data, error } = await supabase
        .from('referrals')
        .select('*')
        .order('created_at', { ascending: false });

      if (error) {
        console.error('Supabase error:', error);
        throw error;
      }
      
      setReferrals(data || []);
    } catch (error: any) {
      console.error('Error fetching referrals:', error);
      toast({
        title: "Error",
        description: "Failed to fetch referral data. Please try again.",
        variant: "destructive",
      });
      setReferrals([]);
    } finally {
      setLoading(false);
    }
  };

  const addReferral = async (referralData: ReferralInsert) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new Error('User not authenticated');
      }

      // Create the insert data with referral_id as undefined to let the trigger generate it
      const insertData = {
        ...referralData,
        referral_id: undefined as any // This will be auto-generated by the trigger
      };

      const { data, error } = await supabase
        .from('referrals')
        .insert(insertData)
        .select()
        .single();

      if (error) throw error;

      setReferrals(prev => [data, ...prev]);
      toast({
        title: "Success",
        description: "Referral added successfully",
      });
      return data;
    } catch (error: any) {
      console.error('Error adding referral:', error);
      toast({
        title: "Error",
        description: "Failed to add referral. Please try again.",
        variant: "destructive",
      });
      throw error;
    }
  };

  const updateReferral = async (id: string, referralData: Partial<Referral>) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new Error('User not authenticated');
      }

      const cleanData = Object.entries(referralData).reduce((acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = value;
        }
        return acc;
      }, {} as any);

      cleanData.updated_at = new Date().toISOString();

      const { data, error } = await supabase
        .from('referrals')
        .update(cleanData)
        .eq('id', id)
        .select()
        .single();

      if (error) throw error;

      setReferrals(prev => prev.map(referral => referral.id === id ? data : referral));
      toast({
        title: "Success",
        description: "Referral updated successfully",
      });
      return data;
    } catch (error: any) {
      console.error('Error updating referral:', error);
      toast({
        title: "Error",
        description: "Failed to update referral. Please try again.",
        variant: "destructive",
      });
      throw error;
    }
  };

  const deleteReferral = async (id: string) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new Error('User not authenticated');
      }

      // Get the referral data before deleting
      const referralToDelete = referrals.find(ref => ref.id === id);
      if (!referralToDelete) {
        throw new Error('Referral not found');
      }

      // Move to recycle bin first
      await moveToRecycleBin('referrals', id, referralToDelete);

      // Then delete from original table
      const { error } = await supabase
        .from('referrals')
        .delete()
        .eq('id', id);

      if (error) throw error;

      setReferrals(prev => prev.filter(referral => referral.id !== id));
      toast({
        title: "Success",
        description: "Referral moved to recycle bin",
      });
    } catch (error: any) {
      console.error('Error deleting referral:', error);
      toast({
        title: "Error",
        description: "Failed to delete referral. Please try again.",
        variant: "destructive",
      });
      throw error;
    }
  };

  const deleteMultipleReferrals = async (ids: string[]) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new Error('User not authenticated');
      }

      // Move all referrals to recycle bin and delete them
      const deletePromises = ids.map(async (id) => {
        const referralToDelete = referrals.find(ref => ref.id === id);
        if (referralToDelete) {
          await moveToRecycleBin('referrals', id, referralToDelete);
          
          const { error } = await supabase
            .from('referrals')
            .delete()
            .eq('id', id);
          
          if (error) throw error;
        }
      });

      await Promise.all(deletePromises);

      setReferrals(prev => prev.filter(referral => !ids.includes(referral.id)));
      toast({
        title: "Success",
        description: `${ids.length} referral${ids.length > 1 ? 's' : ''} moved to recycle bin`,
      });
    } catch (error: any) {
      console.error('Error deleting multiple referrals:', error);
      toast({
        title: "Error",
        description: "Failed to delete some referrals. Please try again.",
        variant: "destructive",
      });
      throw error;
    }
  };

  const fetchReferralPayments = async (referralId: string): Promise<ReferralPayment[]> => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        console.log('User not authenticated');
        return [];
      }

      const { data, error } = await supabase
        .from('referral_payments')
        .select('*')
        .eq('referral_id', referralId)
        .order('payment_date', { ascending: false });

      if (error) throw error;
      return data || [];
    } catch (error: any) {
      console.error('Error fetching referral payments:', error);
      return [];
    }
  };

  const addReferralPayment = async (paymentData: Omit<ReferralPayment, 'id' | 'created_at'>) => {
    try {
      const { data: { user } } = await supabase.auth.getUser();
      if (!user) {
        throw new Error('User not authenticated');
      }

      const { data, error } = await supabase
        .from('referral_payments')
        .insert(paymentData)
        .select()
        .single();

      if (error) throw error;

      toast({
        title: "Success",
        description: "Referral payment added successfully",
      });
      return data;
    } catch (error: any) {
      console.error('Error adding referral payment:', error);
      toast({
        title: "Error",
        description: "Failed to add referral payment. Please try again.",
        variant: "destructive",
      });
      throw error;
    }
  };

  useEffect(() => {
    fetchReferrals();
  }, []);

  return {
    referrals,
    loading,
    addReferral,
    updateReferral,
    deleteReferral,
    deleteMultipleReferrals,
    fetchReferralPayments,
    addReferralPayment,
    refetch: fetchReferrals
  };
};
